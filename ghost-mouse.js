// Generated by CoffeeScript 1.6.3
(function() {
  var GhostMouse, mouseDisabler, mouseDisablerContainer, mousePosition, updateMousePosition, wait,
    __slice = [].slice;

  if (!('classList' in document.body)) {
    throw new Error('Ghost Mouse need Element::classList or a polyfill.');
  }

  mousePosition = {
    x: innerWidth / 2,
    y: innerHeight / 2
  };

  mouseDisablerContainer = document.createElement('div');

  mouseDisablerContainer.classList.add('ghost-mouse-disabler-container');

  mouseDisabler = document.createElement('div');

  mouseDisabler.classList.add('ghost-mouse-disabler');

  mouseDisablerContainer.appendChild(mouseDisabler);

  document.body.appendChild(mouseDisablerContainer);

  updateMousePosition = function(e) {
    var containerPosition, containerRect;
    if (e.ghostMouse != null) {
      return;
    }
    mousePosition.x = e.pageX;
    mousePosition.y = e.pageY;
    containerRect = mouseDisablerContainer.getBoundingClientRect();
    containerPosition = {
      x: containerRect.left + pageXOffset,
      y: containerRect.top + pageYOffset
    };
    mouseDisabler.style.left = "" + (mousePosition.x - containerPosition.x) + "px";
    return mouseDisabler.style.top = "" + (mousePosition.y - containerPosition.y) + "px";
  };

  document.addEventListener('mousemove', updateMousePosition);

  wait = function(time, fn) {
    var _ref;
    if (typeof time === 'function') {
      _ref = [0, time], time = _ref[0], fn = _ref[1];
    }
    return setTimeout(fn, time);
  };

  GhostMouse = (function() {
    var method, methods, _fn, _i, _len,
      _this = this;

    GhostMouse.prototype.className = '';

    GhostMouse.prototype.inverted = false;

    GhostMouse.prototype.events = false;

    GhostMouse.prototype.duration = 1000;

    GhostMouse.prototype.fps = 30;

    GhostMouse.prototype.swing = 1 / 10;

    GhostMouse.prototype.isDown = false;

    GhostMouse.prototype.downTarget = null;

    function GhostMouse(params) {
      var property, value;
      if (params == null) {
        params = {};
      }
      for (property in params) {
        value = params[property];
        this[property] = value;
      }
      this.el = document.createElement('div');
      this.el.classList.add('ghost-mouse');
      if (this.className) {
        this.el.classList.add(this.className);
      }
      if (this.inverted) {
        this.el.classList.add('inverted');
      }
      this.el.style.display = 'none';
      this.container = document.createElement('div');
      this.container.classList.add('ghost-mouse-container');
      this.container.appendChild(this.el);
      document.body.appendChild(this.container);
      this.queue = [];
    }

    GhostMouse.prototype.run = function(script) {
      var _this = this;
      if (script != null) {
        script.call(this);
      }
      document.body.classList.add('ghost-mouse-active');
      if (this.events) {
        document.body.classList.add('ghost-mouse-eventing');
      }
      this._reset(0, function() {
        _this.el.style.display = '';
        wait(10, function() {
          return _this.el.classList.add('active');
        });
        return wait(_this.duration, function() {
          return _this.next();
        });
      });
      return this;
    };

    GhostMouse.prototype.next = function() {
      var command,
        _this = this;
      if (this.queue.length === 0) {
        this.el.classList.remove('active');
        document.body.classList.remove('ghost-mouse-active');
        if (this.events) {
          document.body.classList.remove('ghost-mouse-eventing');
        }
        wait(this.duration, function() {
          return _this.el.style.display = 'none';
        });
      } else {
        command = this.queue.shift();
        command.call(this, function() {
          return _this.next();
        });
      }
      return null;
    };

    GhostMouse.prototype.triggerEvent = function(eventName) {
      var bodyMargin, bodyRect, currentPosition, e, n, target, x, y, _ref;
      if (!this.events) {
        return;
      }
      bodyRect = document.body.getBoundingClientRect();
      bodyMargin = [bodyRect.left + pageXOffset, bodyRect.top + pageYOffset];
      currentPosition = (function() {
        var _i, _len, _ref, _results;
        _ref = [this.el.style.left, this.el.style.top];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(parseFloat(n));
        }
        return _results;
      }).call(this);
      _ref = [currentPosition[0] - pageXOffset, currentPosition[1] - pageYOffset], x = _ref[0], y = _ref[1];
      target = document.elementFromPoint(x, y);
      if (target == null) {
        return;
      }
      if ('createEvent' in document) {
        e = document.createEvent('MouseEvent');
        e.initMouseEvent(eventName, true, true, e.view, e.detail, currentPosition[0], currentPosition[1], currentPosition[0], currentPosition[1], e.ctrlKey, e.shiftKey, e.altKey, e.metaKey, e.button, e.relatedTarget);
      } else {
        document.createEventObject();
        e.eventType = eventName;
        e.pageX = currentPosition[0];
        e.pageY = currentPosition[1];
      }
      e.ghostMouse = this;
      if ('dispatchEvent' in target) {
        target.dispatchEvent(e);
      } else {
        target.fireEvent("on" + eventName, event);
      }
      return e;
    };

    methods = ['down', 'up', 'click', 'move', 'reset'];

    _fn = function(method) {
      return GhostMouse.prototype[method] = function() {
        var originalArgs;
        originalArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.queue.push(function() {
          var callArgs;
          callArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this["_" + method].apply(this, __slice.call(originalArgs).concat(__slice.call(callArgs)));
        });
        return this;
      };
    };
    for (_i = 0, _len = methods.length; _i < _len; _i++) {
      method = methods[_i];
      _fn(method);
    }

    GhostMouse.prototype["do"] = function() {
      var duration, fn, _arg, _j;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), fn = arguments[_j++];
      duration = _arg[0];
      this.queue.push(function(cb) {
        fn.call(this);
        if (duration == null) {
          duration = this.duration;
        }
        return wait(duration, cb);
      });
      return this;
    };

    GhostMouse.prototype.drag = function() {
      var cb, duration, target, x, y, _arg, _j;
      target = arguments[0], x = arguments[1], y = arguments[2], _arg = 5 <= arguments.length ? __slice.call(arguments, 3, _j = arguments.length - 1) : (_j = 3, []), cb = arguments[_j++];
      duration = _arg[0];
      this.queue.push(function(cb) {
        var _this = this;
        if (duration == null) {
          duration = this.duration;
        }
        return this._down(100, function() {
          return _this._move(target, x, y, duration - 200, function() {
            return _this._up(100, cb);
          });
        });
      });
      return this;
    };

    GhostMouse.prototype._reset = function() {
      var cb, containerRect, duration, _arg, _j;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
      duration = _arg[0];
      containerRect = this.container.getBoundingClientRect();
      this.el.style.left = "" + (mousePosition.x - (containerRect.left + pageXOffset)) + "px";
      this.el.style.top = "" + (mousePosition.y - (containerRect.top + pageYOffset)) + "px";
      if (duration == null) {
        duration = this.duration;
      }
      return wait(duration, cb);
    };

    GhostMouse.prototype._down = function() {
      var cb, down, duration, _arg, _j;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
      duration = _arg[0];
      this.isDown = true;
      this.el.classList.add('down');
      down = this.triggerEvent('mousedown');
      this.downTarget = down != null ? down.target : void 0;
      if (duration == null) {
        duration = this.duration;
      }
      return wait(duration, cb);
    };

    GhostMouse.prototype._up = function() {
      var cb, duration, up, _arg, _j;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
      duration = _arg[0];
      this.isDown = false;
      this.el.classList.remove('down');
      up = this.triggerEvent('mouseup');
      if (this.downTarget === (up != null ? up.target : void 0)) {
        this.triggerEvent('click');
      }
      this.downTarget = null;
      if (duration == null) {
        duration = this.duration;
      }
      return wait(duration, cb);
    };

    GhostMouse.prototype._click = function() {
      var cb, duration, _arg, _j,
        _this = this;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
      duration = _arg[0];
      this._down(250, function() {
        return _this._up(function() {});
      });
      if (duration == null) {
        duration = this.duration;
      }
      return wait(duration, cb);
    };

    GhostMouse.prototype._move = function() {
      var animationDuration, cb, duration, elParentOffset, end, i, start, target, targetOffset, targetSize, targetStyle, tick, ticks, x, y, _arg, _fn1, _j, _k, _len1,
        _this = this;
      target = arguments[0], x = arguments[1], y = arguments[2], _arg = 5 <= arguments.length ? __slice.call(arguments, 3, _j = arguments.length - 1) : (_j = 3, []), cb = arguments[_j++];
      duration = _arg[0];
      if (typeof target === 'string') {
        target = document.querySelector(target);
      }
      targetStyle = getComputedStyle(target);
      targetSize = [parseFloat(targetStyle.width), parseFloat(targetStyle.height)];
      targetOffset = target.getBoundingClientRect();
      elParentOffset = this.container.getBoundingClientRect();
      start = {
        x: parseFloat(this.el.style.left || 0),
        y: parseFloat(this.el.style.top || 0)
      };
      end = [(x * targetSize[0]) + ((targetOffset.left + pageXOffset) - (elParentOffset.left + pageXOffset)), (y * targetSize[1]) + ((targetOffset.top + pageYOffset) - (elParentOffset.top + pageYOffset))];
      if (duration == null) {
        duration = this.duration;
      }
      animationDuration = duration - 250;
      ticks = (function() {
        var _k, _ref, _results;
        _results = [];
        for (i = _k = 0, _ref = Math.floor(1000 / this.fps); _ref > 0 ? _k < animationDuration : _k > animationDuration; i = _k += _ref) {
          _results.push(i);
        }
        return _results;
      }).call(this);
      _fn1 = function(tick) {
        return wait(tick, function() {
          var ease, left, step, swing, top, trail;
          step = tick / animationDuration;
          ease = Math.sin(step * Math.PI);
          swing = {
            x: (end[0] - start.x) * _this.swing * ease,
            y: (end[1] - start.y) * _this.swing * ease
          };
          left = "" + (((end[0] - start.x) * step) + start.x + swing.x) + "px";
          top = "" + (((end[1] - start.y) * step) + start.y - swing.y) + "px";
          _this.el.style.left = left;
          _this.el.style.top = top;
          _this.triggerEvent('mousemove');
          if (_this.isDown && !_this.events) {
            trail = document.createElement('div');
            trail.classList.add('ghost-mouse-trail');
            trail.style.left = left;
            trail.style.top = top;
            _this.container.appendChild(trail);
            return wait(duration / 2, function() {
              return _this.container.removeChild(trail);
            });
          }
        });
      };
      for (_k = 0, _len1 = ticks.length; _k < _len1; _k++) {
        tick = ticks[_k];
        _fn1(tick);
      }
      this.downTarget = null;
      return wait(duration, cb);
    };

    GhostMouse.prototype.stop = function() {
      this.queue.splice(0);
      return this;
    };

    GhostMouse.prototype.destroy = function() {
      this.stop();
      this.container.parentNode.removeChild(this.container);
      return null;
    };

    return GhostMouse;

  }).call(this);

  if (typeof window !== "undefined" && window !== null) {
    window.GhostMouse = GhostMouse;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = GhostMouse;
  }

}).call(this);
