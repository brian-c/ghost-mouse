// Generated by CoffeeScript 1.6.2
(function() {
  var GhostMouse, getOffset, mousePosition, wait,
    __slice = [].slice;

  mousePosition = [innerWidth / 2, innerHeight / 2];

  addEventListener('mousemove', function(e) {
    mousePosition[0] = e.pageX;
    return mousePosition[1] = e.pageY;
  });

  wait = function(time, fn) {
    var _ref;

    if (typeof time === 'function') {
      _ref = [0, time], time = _ref[0], fn = _ref[1];
    }
    return setTimeout(fn, time);
  };

  getOffset = function(el) {
    var offset, offsetParent;

    offsetParent = el;
    offset = [0, 0];
    while (offsetParent != null) {
      offset[0] += offsetParent.offsetLeft;
      offset[1] += offsetParent.offsetTop;
      offsetParent = offsetParent.offsetParent;
    }
    return offset;
  };

  GhostMouse = (function() {
    var _willClick;

    GhostMouse.prototype.duration = 1000;

    GhostMouse.prototype.fps = 30;

    GhostMouse.prototype.className = '';

    GhostMouse.prototype.events = true;

    GhostMouse.prototype.el = null;

    GhostMouse.prototype.queue = null;

    _willClick = null;

    function GhostMouse(commands) {
      this.el = document.createElement('div');
      this.el.classList.add('ghost-mouse');
      if (this.className) {
        this.el.classList.add(this.className);
      }
      this.el.style.display = 'none';
      this.el.style.position = 'absolute';
      document.body.appendChild(this.el);
      this.queue = [];
      if (commands != null) {
        this.go(commands);
      }
    }

    GhostMouse.prototype.go = function(commands) {
      var _ref,
        _this = this;

      (_ref = this.queue).push.apply(_ref, commands);
      return this.reset(function() {
        _this.el.style.display = '';
        wait(10, function() {
          return _this.el.classList.add('active');
        });
        return wait(_this.duration, function() {
          return _this.next();
        });
      });
    };

    GhostMouse.prototype.next = function() {
      var command, selector, x, y, _i, _ref,
        _this = this;

      if (this.queue.length === 0) {
        console.log('QUEUE EMPTY');
        this.el.classList.remove('active');
        wait(this.duration, function() {
          return _this.el.style.display = 'none';
        });
        return;
      }
      command = this.queue.shift();
      if (typeof command === 'function') {
        command.call(this);
        return this.next();
      } else if (command in this) {
        return this[command](function() {
          return wait(_this.duration, function() {
            return _this.next();
          });
        });
      } else {
        _ref = command.split(/\s+/), selector = 3 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 2) : (_i = 0, []), x = _ref[_i++], y = _ref[_i++];
        selector = selector.join(' ');
        return this.move(selector, x, y, function() {
          return wait(_this.duration, function() {
            return _this.next();
          });
        });
      }
    };

    GhostMouse.prototype.triggerEvent = function(eventName) {
      var bodyMargin, bodyStyle, currentPosition, e, n, target, x, y, _ref;

      e = document.createEvent('MouseEvent');
      bodyStyle = getComputedStyle(document.body);
      bodyMargin = (function() {
        var _i, _len, _ref, _results;

        _ref = [bodyStyle.marginLeft, bodyStyle.marginTop];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(parseFloat(n));
        }
        return _results;
      })();
      currentPosition = (function() {
        var _i, _len, _ref, _results;

        _ref = [this.el.style.left, this.el.style.top];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(parseFloat(n));
        }
        return _results;
      }).call(this);
      _ref = [bodyMargin[0] + currentPosition[0], bodyMargin[1] + currentPosition[1]], x = _ref[0], y = _ref[1];
      e.initMouseEvent(eventName, true, true, e.view, e.detail, x, y, x, y, e.ctrlKey, e.shiftKey, e.altKey, e.metaKey, e.button, e.relatedTarget);
      target = document.elementFromPoint(x, y);
      target.dispatchEvent(e);
      return e;
    };

    GhostMouse.prototype.down = function(cb) {
      var down;

      console.log('GHOST MOUSE DOWN');
      this.el.classList.add('down');
      if (this.events) {
        down = this.triggerEvent('mousedown');
      }
      this._willClick = down.target;
      return cb();
    };

    GhostMouse.prototype.up = function(cb) {
      var up;

      console.log('GHOST MOUSE UP');
      if (this.events) {
        up = this.triggerEvent('mouseup');
      }
      this.el.classList.remove('down');
      if (this._willClick === (up != null ? up.target : void 0)) {
        this.triggerEvent('click');
      }
      this._willClick = null;
      return cb();
    };

    GhostMouse.prototype.click = function(cb) {
      var _this = this;

      console.log('GHOST MOUSE CLICK');
      return this.down(function() {
        return wait(250, function() {
          return _this.up(function() {
            return cb();
          });
        });
      });
    };

    GhostMouse.prototype.move = function(target, x, y, cb) {
      var elParentOffset, end, i, start, targetOffset, targetSize, targetStyle, tick, ticks, _fn, _i, _len,
        _this = this;

      if (typeof target === 'string') {
        target = document.querySelector(target);
      }
      console.log("GHOST MOUSE MOVE (" + x + ", " + y + ")", target);
      targetStyle = getComputedStyle(target);
      targetSize = [parseFloat(targetStyle.width), parseFloat(targetStyle.height)];
      targetOffset = getOffset(target);
      elParentOffset = getOffset(this.el.parentNode);
      start = [parseFloat(this.el.style.left || 0), parseFloat(this.el.style.top || 0)];
      end = [(x * targetSize[0]) + (targetOffset[0] - elParentOffset[0]), (y * targetSize[1]) + (targetOffset[1] - elParentOffset[1])];
      ticks = (function() {
        var _i, _ref, _ref1, _results;

        _results = [];
        for (i = _i = 0, _ref = this.duration, _ref1 = Math.floor(1000 / this.fps); _ref1 > 0 ? _i < _ref : _i > _ref; i = _i += _ref1) {
          _results.push(i);
        }
        return _results;
      }).call(this);
      _fn = function(tick) {
        return wait(tick, function() {
          var ease, step, swing;

          step = tick / _this.duration;
          ease = Math.sin(step * Math.PI);
          swing = [(end[0] - start[0]) / 3 * ease, (end[1] - start[1]) / 3 * ease];
          _this.el.style.left = "" + (((end[0] - start[0]) * step) + start[0] + swing[0]) + "px";
          _this.el.style.top = "" + (((end[1] - start[1]) * step) + start[1] - swing[1]) + "px";
          if (_this.events) {
            return _this.triggerEvent('mousemove');
          }
        });
      };
      for (_i = 0, _len = ticks.length; _i < _len; _i++) {
        tick = ticks[_i];
        _fn(tick);
      }
      this._willClick = null;
      return wait(this.duration, function() {
        return cb();
      });
    };

    GhostMouse.prototype.reset = function(cb) {
      var bodyMargin, bodyStyle;

      console.log('GHOST MOUSE RESET');
      bodyStyle = getComputedStyle(document.body);
      bodyMargin = [parseFloat(bodyStyle.marginLeft), parseFloat(bodyStyle.marginTop)];
      this.el.style.left = "" + (mousePosition[0] - bodyMargin[0]) + "px";
      this.el.style.top = "" + (mousePosition[1] - bodyMargin[1]) + "px";
      return cb();
    };

    GhostMouse.prototype.stop = function() {
      return this.queue.splice(0);
    };

    GhostMouse.prototype.destroy = function() {
      this.stop();
      return this.el.parentNode.removeChild(this.el);
    };

    return GhostMouse;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.GhostMouse = GhostMouse;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = GhostMouse;
  }

}).call(this);
