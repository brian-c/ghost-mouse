// Generated by CoffeeScript 1.6.2
(function() {
  var GhostMouse, getOffset, mouse, wait,
    __slice = [].slice;

  mouse = [NaN, NaN];

  addEventListener('mousemove', function(e) {
    mouse[0] = e.pageX;
    return mouse[1] = e.pageY;
  });

  wait = function(time, fn) {
    var _ref;

    if (typeof time === 'function') {
      _ref = [0, time], time = _ref[0], fn = _ref[1];
    }
    return setTimeout(fn, time);
  };

  getOffset = function(el) {
    var offset, offsetParent;

    offsetParent = el;
    offset = [0, 0];
    while (offsetParent != null) {
      offset[0] += offsetParent.offsetLeft;
      offset[1] += offsetParent.offsetTop;
      offsetParent = offsetParent.offsetParent;
    }
    return offset;
  };

  GhostMouse = (function() {
    GhostMouse.genericInstance = null;

    GhostMouse.go = function(commands) {
      var _ref, _ref1;

      if ((_ref = this.genericInstance) == null) {
        this.genericInstance = new this;
      }
      return (_ref1 = this.genericInstance).go.apply(_ref1, arguments);
    };

    GhostMouse.stop = function() {
      var _ref;

      return (_ref = this.genericInstance) != null ? _ref.stop.apply(_ref, arguments) : void 0;
    };

    GhostMouse.prototype.duration = 1000;

    GhostMouse.prototype.className = '';

    GhostMouse.prototype.el = null;

    GhostMouse.prototype.queue = null;

    function GhostMouse(commands) {
      this.el = document.createElement('div');
      this.el.classList.add('ghost-mouse');
      if (this.className) {
        this.el.classList.add(this.className);
      }
      this.el.style.display = 'none';
      this.el.style.position = 'absolute';
      document.body.appendChild(this.el);
      this.queue = [];
      if (commands != null) {
        this.go(commands);
      }
    }

    GhostMouse.prototype.go = function(commands) {
      var _ref,
        _this = this;

      (_ref = this.queue).push.apply(_ref, commands);
      return this.reset(function() {
        _this.el.style.display = '';
        wait(function() {
          return _this.el.classList.add('active');
        });
        return wait(_this.duration, function() {
          return _this.next();
        });
      });
    };

    GhostMouse.prototype.next = function() {
      var command, selector, x, y, _i, _ref,
        _this = this;

      if (this.queue.length === 0) {
        console.log('QUEUE EMPTY');
        this.el.classList.remove('active');
        wait(this.duration, function() {
          return _this.el.style.display = 'none';
        });
        return;
      }
      command = this.queue.shift();
      if (typeof command === 'function') {
        command.call(this);
        return this.next();
      } else if (command in this) {
        return this[command](function() {
          return wait(_this.duration, function() {
            return _this.next();
          });
        });
      } else {
        _ref = command.split(/\s+/), selector = 3 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 2) : (_i = 0, []), x = _ref[_i++], y = _ref[_i++];
        selector = selector.join(' ');
        return this.position(selector, x, y, function() {
          return wait(_this.duration, function() {
            return _this.next();
          });
        });
      }
    };

    GhostMouse.prototype.down = function(cb) {
      console.log('GHOST MOUSE DOWN');
      this.el.classList.add('down');
      return cb();
    };

    GhostMouse.prototype.up = function(cb) {
      console.log('GHOST MOUSE UP');
      this.el.classList.remove('down');
      return cb();
    };

    GhostMouse.prototype.click = function(cb) {
      var _this = this;

      console.log('GHOST MOUSE CLICK');
      return this.down(function() {
        return wait(250, function() {
          return _this.up(function() {
            return cb();
          });
        });
      });
    };

    GhostMouse.prototype.position = function(target, x, y, cb) {
      var elParentOffset, targetOffset, targetSize, targetStyle;

      if (typeof target === 'string') {
        target = document.querySelector(target);
      }
      console.log("GHOST MOUSE POSITION (" + x + ", " + y + ")", target);
      targetStyle = getComputedStyle(target);
      targetSize = [parseFloat(targetStyle.width), parseFloat(targetStyle.height)];
      targetOffset = getOffset(target);
      elParentOffset = getOffset(this.el.parentNode);
      this.el.style.left = (x * targetSize[0]) + (targetOffset[0] - elParentOffset[0]);
      this.el.style.top = (y * targetSize[1]) + (targetOffset[1] - elParentOffset[1]);
      return cb();
    };

    GhostMouse.prototype.reset = function(cb) {
      var bodyMargin, bodySize, bodyStyle;

      console.log('GHOST MOUSE RESET');
      bodyStyle = getComputedStyle(document.body);
      bodySize = [parseFloat(bodyStyle.width), parseFloat(bodyStyle.height)];
      bodyMargin = [parseFloat(bodyStyle.marginLeft), parseFloat(bodyStyle.marginTop)];
      return this.position(document.body, (mouse[0] - bodyMargin[0]) / bodySize[0], (mouse[1] - bodyMargin[1]) / bodySize[1], cb);
    };

    GhostMouse.prototype.stop = function() {
      return this.queue.splice(0);
    };

    GhostMouse.prototype.destroy = function() {
      this.stop();
      return this.el.parentNode.removeChild(this.el);
    };

    return GhostMouse;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.GhostMouse = GhostMouse;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = GhostMouse;
  }

}).call(this);
